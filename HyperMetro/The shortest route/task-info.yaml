type: edu
files:
- name: src/Main.java
  visible: true
  text: |
    public class Main {

        public static void main(String[] args) {
            System.out.println("Hello, world!");
        }
    }
  learner_created: false
- name: test/Tests.java
  visible: false
  text: |-
    import org.hyperskill.hstest.dynamic.input.DynamicTestingMethod;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;

    import java.util.Arrays;

    public class Tests extends StageTest<String> {
        // test from the previous stage with one line
        @DynamicTestingMethod
        CheckResult oneLineTest() {

            TestedProgram main = new TestedProgram(Main.class);
            main.start("./test/baltimore.json");
            String output = main.execute("/output \"SubwayLink\"").trim();

            checkDepots(output);
            checkOutputLength(output, 14);
            assertStations(output, new String[]{"Owings Mills", "Old Court", "Milford Mill", "Reiserstown Plaza",
                "Rogers Avenue", "West Cold Spring", "Mondawmin", "Penn North", "Uptown", "State Center",
                "Lexington Market", "Charles Center", "Shot Tower/Market Place", "Johns Hopkins Hospital"});

            return CheckResult.correct();
        }

        // test of example
        @DynamicTestingMethod
        CheckResult multipleLineOutputTest() {

            TestedProgram main = new TestedProgram(Main.class);
            main.start("./test/lausanne.json");
            String output = main.execute("/output \"m1\"").trim();

            checkDepots(output);
            checkOutputLength(output, 15);
            assertStations(output, new String[]{"Renes—Gare", "Epenex", "Crochy", "Cerisaie",
                "Bassenges", "EPFL", "UNL—Sorge", "Mouline", "UNL—Chemberonne", "Bourdonnette", "Melley",
                "Provence", "Montelly", "Vigie", "Lausanne—Flon"});

            output = main.execute("/output \"m2\"");

            checkDepots(output);
            checkOutputLength(output, 14);
            assertStations(output, new String[]{"Croisettes", "Vennes", "Fourmi", "Sallaz", "CHUV", "Ours",
                "Riponne M.Bejart", "Bessieres", "Lausanne—Flon", "Lausanne Gare CFF", "Grancy", "Delices", "Jourdils",
                "Ouchy—Olympique"});

            return CheckResult.correct();
        }

        // example test pt.2 (with addition)
        @DynamicTestingMethod
        CheckResult additionTest() {

            TestedProgram main = new TestedProgram(Main.class);
            main.start("./test/lausanne.json");

            // added a station to the end of the line
            main.execute("/append \"m1\" \"Test station 1\"");
            String output = main.execute("/output \"m1\"");

            checkDepots(output);
            checkOutputLength(output, 16);
            assertStations(output, new String[]{"Renes—Gare", "Epenex", "Crochy", "Cerisaie",
                "Bassenges", "EPFL", "UNL—Sorge", "Mouline", "UNL—Chemberonne", "Bourdonnette", "Melley",
                "Provence", "Montelly", "Vigie", "Lausanne—Flon", "Test station 1"});

            // added another one
            main.execute("/append \"m1\" \"Test station 2\"");
            output = main.execute("/output \"m1\"");

            checkDepots(output);
            checkOutputLength(output, 17);
            assertStations(output, new String[]{"Renes—Gare", "Epenex", "Crochy", "Cerisaie",
                "Bassenges", "EPFL", "UNL—Sorge", "Mouline", "UNL—Chemberonne", "Bourdonnette", "Melley",
                "Provence", "Montelly", "Vigie", "Lausanne—Flon", "Test station 1", "Test station 2"});

            // added one station to the beginning of the line
            main.execute("/add-head \"m1\" \"Head\"");
            output = main.execute("/output \"m1\"");

            checkDepots(output);
            checkOutputLength(output, 18);
            assertStations(output, new String[]{"Head", "Renes—Gare", "Epenex", "Crochy", "Cerisaie",
                "Bassenges", "EPFL", "UNL—Sorge", "Mouline", "UNL—Chemberonne", "Bourdonnette", "Melley",
                "Provence", "Montelly", "Vigie", "Lausanne—Flon", "Test station 1", "Test station 2"});

            return CheckResult.correct();
        }

        // not existing file check
        @DynamicTestingMethod
        CheckResult nonexistingFileTest() {
            TestedProgram main = new TestedProgram(Main.class);
            String output = main.start("tHiS_fIlE_DoEs_nOt_ExIsT.txt");
            if (output.trim().length() == 0) {
                return CheckResult.wrong("The program did not print anything when the file was not exist. ");
            }
            if (output.toLowerCase().startsWith("depot") || output.toLowerCase().endsWith("depot")) {
                return CheckResult.wrong("It looks like the program did not print an error message when the file was not exist.");
            }
            return CheckResult.correct();
        }

        // test of a case from the example
        @DynamicTestingMethod
        CheckResult outputLineWithTransfer() {
            TestedProgram main = new TestedProgram(Main.class);
            main.start("./test/prague.json");

            String[][] stations = new String[][]{
                {"Nemocnice Motol", null},
                {"Petriny", null},
                {"Nadrazi Veleslavin", null},
                {"Borislavka", null},
                {"Dejvicka", null},
                {"Hradcanska", null},
                {"Malostranska", null},
                {"Staromestska", null},
                {"Mustek", "Linka B"},
                {"Muzeum", "Linka C"},
                {"Namesti Miru", null},
                {"Jiriho z Podebrad", null},
                {"Flora", null},
                {"Zelivskeho", null},
                {"Strasnicka", null},
                {"Skalka", null},
                {"Depo Hostivar", null}
            };

            String output = main.execute("/output \"Linka A\"");
            checkDepots(output);

            checkOutputLength(output, 17);
            assertWithTransfer(output, stations);

            return CheckResult.correct();
        }

        @DynamicTestingMethod
        CheckResult connectLinesTest() {
            TestedProgram main = new TestedProgram(Main.class);
            main.start("./test/prague.json");

            String[][] stations = new String[][]{
                {"Nemocnice Motol", null},
                {"Petriny", "Linka C"},
                {"Nadrazi Veleslavin", null},
                {"Borislavka", null},
                {"Dejvicka", null},
                {"Hradcanska", null},
                {"Malostranska", null},
                {"Staromestska", null},
                {"Mustek", "Linka B"},
                {"Muzeum", "Linka C"},
                {"Namesti Miru", null},
                {"Jiriho z Podebrad", null},
                {"Flora", null},
                {"Zelivskeho", null},
                {"Strasnicka", null},
                {"Skalka", null},
                {"Depo Hostivar", null}
            };

            main.execute("/connect \"Linka C\" \"I.P.Pavlova\" \"Linka A\" \"Petriny\"");
            String output = main.execute("/output \"Linka A\"");

            checkDepots(output);
            checkOutputLength(output, 17);
            assertWithTransfer(output, stations);

            return CheckResult.correct();
        }

        @DynamicTestingMethod
        CheckResult simpleRouteTest() {
            TestedProgram main = new TestedProgram(Main.class);
            main.start("./test/prague.json");

            String[] correctRoute = {"Petriny", "Nadrazi Veleslavin", "Borislavka", "Dejvicka", "Hradcanska", "Malostranska",
                "Staromestska", "Mustek", "Muzeum", "Namesti Miru", "Jiriho z Podebrad", "Flora"};

            String[] sOutput = main.execute("/route \"Linka A\" \"Petriny\" \"Linka A\" \"Flora\"").toLowerCase().split("\n");

            if (sOutput.length != correctRoute.length) {
                return CheckResult.wrong("Your program printed an incorrect number of stations in the route.\n" +
                    "Expected: " + correctRoute.length + " stations." +
                    "\nYour output: " + sOutput.length + " stations.");
            }

            for (int i = 0; i < correctRoute.length; i++) {
                if (i == 0 && !correctRoute[i].toLowerCase().equals(sOutput[i].toLowerCase())) {
                    return CheckResult.wrong("The first station in the output should be '" + correctRoute[i] + "'.");
                } else if (i != 0) {
                    if (!correctRoute[i].toLowerCase().equals(sOutput[i].toLowerCase())) {
                        return CheckResult.wrong("After '" + correctRoute[i - 1] + "' should be '" + correctRoute[i] + "'.");
                    }
                }
            }

            return CheckResult.correct();
        }

        @DynamicTestingMethod
        CheckResult advancedRouteTest() {

            TestedProgram main = new TestedProgram(Main.class);
            main.start("./test/prague.json");

            String[] stations = {"Vysehrad", "I.P.Pavlova", "Muzeum",
                "Transition to line Linka A", "Muzeum", "Mustek",
                "Transition to line Linka B", "Mustek", "Namesti Republiky"};
            String[] sOutput = main.execute("/route \"Linka C\" \"Vysehrad\" \"Linka B\" \"Namesti Republiky\"").split("\n");

            if (sOutput.length != stations.length) {
                return CheckResult.wrong("Your program printed an incorrect number of stations in the route.\n" +
                    "Expected: " + (stations.length - 4) + " stations and 2 transitions. Output should be " + stations.length + " lines." +
                    "\nYour output: " + sOutput.length + " lines");
            }

            for (int i = 0; i < stations.length; i++) {
                if (i == 0 && !stations[i].toLowerCase().equals(sOutput[i].toLowerCase())) {
                    return CheckResult.wrong("The first station in the output should be " + stations[i]);
                } else if (i != 0) {
                    if (!stations[i].toLowerCase().equals(sOutput[i].toLowerCase())) {
                        return CheckResult.wrong("After '" + stations[i - 1] + "' should be '" + stations[i] + "'.");
                    }
                }
            }

            return CheckResult.correct();
        }

        // checks for "depot" at the start and at the end
        void checkDepots(String output) {
            output = output.trim().toLowerCase();
            if (!output.startsWith("depot")) {
                throw new WrongAnswer("Your output should start with 'depot'.");
            } else if (!output.endsWith("depot")) {
                throw new WrongAnswer("Your output should end with 'depot'.");
            }
        }

        // checks number of stations in output
        void checkOutputLength(String output, int correctLength) {
            int length = output.trim().split("\n").length;
            if (length != correctLength) {
                throw new WrongAnswer("You output contains wrong number of lines.\n" +
                    "Expected: " + correctLength + " lines\n" +
                    "Your output: " + length + " lines");
            }
        }

        // checks stations
        void assertStations(String output, String[] stations) {

            String[] sOutput = output.trim().split("\n");

            for (int i = 0; i < stations.length; i++) {

                String currentLine = sOutput[i].trim();
                if (currentLine.split("-").length != 3) {
                    throw new WrongAnswer("There is should be 3 stations in one line.\n" +
                        "Treat 'depot' as a station name");
                }

                // Checking the first line
                if (i == 0) {
                    for (int j = 0; j < 2; j++) {
                        if (!currentLine.contains(stations[i + j])) {
                            throw new WrongAnswer("Can't find station '" + stations[i + j] + "' in the line number " + (i + 1));
                        }
                    }
                    // Checking the last line
                } else if (i == stations.length - 1) {
                    for (int j = 0; j < 2; j++) {
                        if (!currentLine.contains(stations[i + j - 1])) {
                            throw new WrongAnswer("Can't find station '" + stations[i + j - 1] + "' in the line number " + (i + 1));
                        }
                    }
                    // Checking the rest lines
                } else {
                    for (int j = 0; j < 3; j++) {
                        if (!currentLine.contains(stations[i + j - 1])) {
                            throw new WrongAnswer("Can't find station '" + stations[i + j - 1] + "' in the line number " + (i + 1));
                        }
                    }
                }
            }
        }

        void assertWithTransfer(String output, String[][] stations) {

            String[] sOutput = output.trim().split("\n");

            int index = 0;
            for (String item : sOutput) {
                if (stations[index][1] == null) {
                    if (!item.toLowerCase().trim().contains(stations[index][0].toLowerCase())) {
                        throw new WrongAnswer("There is an error in your program's reply. Some stations were not found.\n" + stations[index][0]);
                    }
                } else if (!item.toLowerCase().trim().contains(stations[index][0].toLowerCase()) ||
                    !item.toLowerCase().trim()
                        .replaceAll("\\(", "")
                        .replaceAll("\\)", "")
                        .contains(stations[index][1].toLowerCase())) {
                    throw new WrongAnswer("There is an error with a transfer print.\n" + item + "\n" + Arrays.toString(stations[index]));
                }
                ++index;
            }
        }
    }
  learner_created: false
- name: test/prague.json
  visible: false
  text: |-
    {
      "Linka A": {
        "1": {
          "name": "Nemocnice Motol" ,
          "transfer": []
        } ,
        "2": {
          "name": "Petriny" ,
          "transfer": []
        } ,
        "3": {
          "name": "Nadrazi Veleslavin" ,
          "transfer": []
        } ,
        "4": {
          "name": "Borislavka" ,
          "transfer": []
        } ,
        "5": {
          "name": "Dejvicka" ,
          "transfer": []
        } ,
        "6": {
          "name": "Hradcanska" ,
          "transfer": []
        } ,
        "7": {
          "name": "Malostranska" ,
          "transfer": []
        } ,
        "8": {
          "name": "Staromestska" ,
          "transfer": []
        } ,
        "9": {
          "name": "Mustek" ,
          "transfer": [
            {
              "line": "Linka B" ,
              "station": "Mustek"
            }
          ]
        } ,
        "10": {
          "name": "Muzeum" ,
          "transfer": [
            {
              "line": "Linka C" ,
              "station": "Muzeum"
            }
          ]
        } ,
        "11": {
          "name": "Namesti Miru" ,
          "transfer": []
        } ,
        "12": {
          "name": "Jiriho z Podebrad" ,
          "transfer": []
        } ,
        "13": {
          "name": "Flora" ,
          "transfer": []
        } ,
        "14": {
          "name": "Zelivskeho" ,
          "transfer": []
        } ,
        "15": {
          "name": "Strasnicka" ,
          "transfer": []
        } ,
        "16": {
          "name": "Skalka" ,
          "transfer": []
        } ,
        "17": {
          "name": "Depo Hostivar" ,
          "transfer": []
        }
      } ,
      "Linka B": {
        "1": {
          "name": "Cerny Most" ,
          "transfer": []
        } ,
        "2": {
          "name": "Rajska zahrada" ,
          "transfer": []
        } ,
        "3": {
          "name": "Hloubetin" ,
          "transfer": []
        } ,
        "4": {
          "name": "Kolbenova" ,
          "transfer": []
        } ,
        "5": {
          "name": "Vysocanska" ,
          "transfer": []
        } ,
        "6": {
          "name": "Ceskomoravska" ,
          "transfer": []
        } ,
        "7": {
          "name": "Palmovka" ,
          "transfer": []
        } ,
        "8": {
          "name": "Invalidovna" ,
          "transfer": []
        } ,
        "9": {
          "name": "Krizikova" ,
          "transfer": []
        } ,
        "10": {
          "name": "Florenc" ,
          "transfer": [
            {
              "line": "Linka C" ,
              "station": "Florenc"
            }
          ]
        } ,
        "11": {
          "name": "Namesti Republiky" ,
          "transfer": []
        } ,
        "12": {
          "name": "Mustek" ,
          "transfer": [
            {
              "line": "Linka B" ,
              "station": "Mustek"
            }
          ]
        } ,
        "13": {
          "name": "Narodni trida" ,
          "transfer": []
        } ,
        "14": {
          "name": "Karlovo namesti" ,
          "transfer": []
        } ,
        "15": {
          "name": "Andel" ,
          "transfer": []
        } ,
        "16": {
          "name": "Smichovske nadrazi" ,
          "transfer": []
        } ,
        "17": {
          "name": "Radlicka" ,
          "transfer": []
        } ,
        "18": {
          "name": "Jinonice" ,
          "transfer": []
        } ,
        "19": {
          "name": "Nove Butovice" ,
          "transfer": []
        } ,
        "20": {
          "name": "Hurka" ,
          "transfer": []
        } ,
        "21": {
          "name": "Luziny" ,
          "transfer": []
        } ,
        "22": {
          "name": "Luka" ,
          "transfer": []
        } ,
        "23": {
          "name": "Stodulky" ,
          "transfer": []
        } ,
        "24": {
          "name": "Zlicin" ,
          "transfer": []
        }
      } ,
      "Linka C": {
        "1": {
          "name": "Letnany" ,
          "transfer": []
        } ,
        "2": {
          "name": "Prosek" ,
          "transfer": []
        } ,
        "3": {
          "name": "Strizkov" ,
          "transfer": []
        } ,
        "4": {
          "name": "Ladvi" ,
          "transfer": []
        } ,
        "5": {
          "name": "Kobylisy" ,
          "transfer": []
        } ,
        "6": {
          "name": "Nadrazi Holesovice" ,
          "transfer": []
        } ,
        "7": {
          "name": "Vltavska" ,
          "transfer": []
        } ,
        "8": {
          "name": "Florenc" ,
          "transfer": [
            {
              "line": "Linka B" ,
              "station": "Florenc"
            }
          ]
        } ,
        "9": {
          "name": "Hlavni nadrazi" ,
          "transfer": []
        } ,
        "10": {
          "name": "Muzeum" ,
          "transfer": [
            {
              "line": "Linka A" ,
              "station": "Muzeum"
            }
          ]
        } ,
        "11": {
          "name": "I.P.Pavlova" ,
          "transfer": []
        } ,
        "12": {
          "name": "Vysehrad" ,
          "transfer": []
        } ,
        "13": {
          "name": "Prazskeho povstani" ,
          "transfer": []
        } ,
        "14": {
          "name": "Pankrac" ,
          "transfer": []
        } ,
        "15": {
          "name": "Budejovicka" ,
          "transfer": []
        } ,
        "16": {
          "name": "Kacerov" ,
          "transfer": []
        } ,
        "17": {
          "name": "Roztyly" ,
          "transfer": []
        } ,
        "18": {
          "name": "Chodov" ,
          "transfer": []
        } ,
        "19": {
          "name": "Opatov" ,
          "transfer": []
        } ,
        "20": {
          "name": "Haje" ,
          "transfer": []
        }
      }
    }
  learner_created: false
- name: test/lausanne.json
  visible: false
  text: |-
    {
      "m1": {
        "1": {
          "name": "Renes—Gare",
          "transfer": []
        },
        "2": {
          "name": "Epenex",
          "transfer": []
        },
        "3": {
          "name": "Crochy",
          "transfer": []
        },
        "4": {
          "name": "Cerisaie",
          "transfer": []
        },
        "5": {
          "name": "Bassenges",
          "transfer": []
        },
        "6": {
          "name": "EPFL",
          "transfer": []
        },
        "7": {
          "name": "UNL—Sorge",
          "transfer": []
        },
        "8": {
          "name": "Mouline",
          "transfer": []
        },
        "9": {
          "name": "UNL—Chemberonne",
          "transfer": []
        },
        "10": {
          "name": "Bourdonnette",
          "transfer": []
        },
        "11": {
          "name": "Melley",
          "transfer": []
        },
        "12": {
          "name": "Provence",
          "transfer": []
        },
        "13": {
          "name": "Montelly",
          "transfer": []
        },
        "14": {
          "name": "Vigie",
          "transfer": []
        },
        "15": {
          "name": "Lausanne—Flon",
          "transfer": []
        }
      },
      "m2": {
        "1": {
          "name": "Croisettes",
          "transfer": []
        },
        "2": {
          "name": "Vennes",
          "transfer": []
        },
        "3": {
          "name": "Fourmi",
          "transfer": []
        },
        "4": {
          "name": "Sallaz",
          "transfer": []
        },
        "5": {
          "name": "CHUV",
          "transfer": []
        },
        "6": {
          "name": "Ours",
          "transfer": []
        },
        "7": {
          "name": "Riponne M.Bejart",
          "transfer": []
        },
        "8": {
          "name": "Bessieres",
          "transfer": []
        },
        "9": {
          "name": "Lausanne—Flon",
          "transfer": []
        },
        "10": {
          "name": "Lausanne Gare CFF",
          "transfer": []
        },
        "11": {
          "name": "Grancy",
          "transfer": []
        },
        "12": {
          "name": "Delices",
          "transfer": []
        },
        "13": {
          "name": "Jourdils",
          "transfer": []
        },
        "14": {
          "name": "Ouchy—Olympique",
          "transfer": []
        }
      }
    }
  learner_created: false
- name: test/baltimore.json
  visible: false
  text: |-
    {
      "SubwayLink": {
        "1": {
          "name": "Owings Mills",
          "transfer": [],
          "time": 2
        },
        "2": {
          "name": "Old Court",
          "transfer": [],
          "time": 4
        },
        "3": {
          "name": "Milford Mill",
          "transfer": [],
          "time": 6
        },
        "4": {
          "name": "Reiserstown Plaza",
          "transfer": [],
          "time": 3
        },
        "5": {
          "name": "Rogers Avenue",
          "transfer": [],
          "time": 2
        },
        "6": {
          "name": "West Cold Spring",
          "transfer": [],
          "time": 6
        },
        "7": {
          "name": "Mondawmin",
          "transfer": [],
          "time": 4
        },
        "8": {
          "name": "Penn North",
          "transfer": [],
          "time": 5
        },
        "9": {
          "name": "Uptown",
          "transfer": [],
          "time": 7
        },
        "10": {
          "name": "State Center",
          "transfer": [],
          "time": 3
        },
        "11": {
          "name": "Lexington Market",
          "transfer": [],
          "time": 5
        },
        "12": {
          "name": "Charles Center",
          "transfer": [],
          "time": 6
        },
        "13": {
          "name": "Shot Tower/Market Place",
          "transfer": [],
          "time": 4
        },
        "14": {
          "name": "Johns Hopkins Hospital",
          "transfer": [], "time": null
        }
      }
    }
  learner_created: false
- name: src/Metro.java
  visible: true
  text: |
    import com.google.gson.Gson;
    import com.google.gson.JsonObject;

    import java.util.*;
    import java.util.regex.Matcher;
    import java.util.regex.Pattern;

    public class Metro {
        List<Station> stations;
        Map<String, List<Station>> metro;
        String operation = "";
        String metroName = "";
        String stationName = "";

        public void run(String filePath) {
            Map<String, JsonObject> metros = Utils.loadFromJson(filePath);
            metro = new LinkedHashMap<>();
            if (metros != null) {


                for (Map.Entry<String, JsonObject> entry : metros.entrySet()) {
                  /*  stations = Utils.getStations(entry.getValue().toString());
                    Station depot = new Station();
                    depot.setName("depot");
                    stations.add(0, depot);
                    stations.add(depot);
                    metro.put(entry.getKey(), stations);*/
                   // System.out.println(entry.getKey());
                   // System.out.println(entry.getValue().toString());
                    stations = Utils.getStations(entry.getValue().toString());
                    Station depot = new Station();
                    depot.setName("depot");
                    stations.add(0, depot);
                    stations.add(depot);
                    metro.put(entry.getKey(), stations);
                   // printStation(stations);
                }
           /*List<String> stations = Utils.readF(filePath);
           stations.add(0, "depot");
           stations.add("depot");
           printStation(stations);*/
                menu();
            }
        }

        public void menu() {
            Scanner sc = new Scanner(System.in);
            boolean isRun = true;
            List<Station> temp;
            Station st;
            while (isRun) {
                String command = sc.nextLine();
                parseCommand(command);
                switch (operation) {
                    case "/append":
                        temp = metro.get(metroName);
                        st = new Station();
                        st.setName(stationName);
                        temp.add(temp.size() - 1 , st);
                        metro.replace(metroName, temp);
                        break;
                    case "/add-head":
                        temp = metro.get(metroName);
                        st = new Station();
                        st.setName(stationName);
                        temp.add(1 , st);
                        metro.replace(metroName, temp);
                        break;
                    case "/remove":
                        temp = metro.get(metroName);
                        for (int i = 0; i < temp.size(); i++) {
                            if (temp.get(i).getName().equals(stationName)) {
                                temp.remove(i);
                            }
                        }
                        metro.replace(metroName, temp);
                        break;
                    case "/output":
                        printStation(metro.get(metroName));
                        /*for (Map.Entry<String, List<Station>> entry : metro.entrySet()) {
                            printStation(entry.getValue());
                        }*/
                        break;
                    case "/connect":
                        String[] array = command.split(" \"");
                        String line1 = array[1].replace("\"", "");
                        String station1 = array[2].replace("\"", "");
                        String line2 = array[3].replace("\"", "");
                        String station2 = array[4].replace("\"", "");
                        Transfer transfer1 = new Transfer(line1, station1);
                        Transfer transfer2 = new Transfer(line2, station2);
                       // System.out.println(line1 + "/" + station1 + "/" + line2 + "/" + station2);

                        List<Station> temp1 = metro.get(line1);
                        for (int i = 0; i < temp1.size(); i++) {
                            if (temp1.get(i).name.equals(station1)) {
                                Station tempSt = temp1.get(i);
                                tempSt.setTransfer(transfer2);
                                temp1.set(i, tempSt);
                            }
                        }
                        metro.replace(line1, temp1);

                        List<Station> temp2 = metro.get(line2);
                        for (int i = 0; i < temp2.size(); i++) {
                            if (temp2.get(i).name.equals(station2)) {
                                Station tempSt = temp2.get(i);
                                tempSt.setTransfer(transfer1);
                                temp2.set(i, tempSt);
                            }
                        }
                        metro.replace(line2, temp2);


                        /*for (Map.Entry<String, List<Station>> entry : metro.entrySet()) {
                            printStation(entry.getValue());
                        }*/
                        break;
                    case "/exit":
                        isRun = false;
                        break;
                }
            }

        }

        public void parseCommand(String input) {
            operation = "";
            metroName = "";
            stationName = "";
            //input = input.replace("\"", "");
            String[] array = input.split("\"");
            for (int i = 0; i < array.length; i++) {
                if (i == 0) operation = array[i];
                else if (i == 1) metroName = array[i];
                else stationName = array[i];
            }
            operation = operation.replace("\"", "").trim();
            metroName = metroName.replace("\"", "").trim();;
            stationName = stationName.replace("\"", "").trim();;
        }

        public void printStation(List<Station> stations) {
            for (int i = 0; i < stations.size(); i++) {
                System.out.println(stations.get(i).print());
            }
        }

    }
  learner_created: true
- name: src/HyperMetro.java
  visible: true
  text: |-
    import java.util.List;

    public class HyperMetro<T> {
        private Node<T> tail;
        private Node<T> head;
        private int size;

        HyperMetro() {
            this.size = 0;
        }

        public void addFirst(T value) {
            if (this.size == 0) {
                this.head = new Node(value, null, null);
                this.tail = this.head;
            } else {
                Node<T> temp = this.head;
                this.head = new Node(value, null, temp);
                temp.setPrev(this.head);
            }
            this.size++;
        }

        public void addLast(T value) {
            if (this.size == 0) {
                this.head = new Node(value, null, null);
                this.tail = this.head;
            } else {
                Node<T> temp = this.tail;
                this.tail = new Node(value, temp, null);
                temp.setNext(this.tail);
            }
            this.size++;
        }

        public void removeLast() {
            if (this.size == 0) {
                return;
            } else if (this.size == 1) {
                this.head = null;
                this.tail = null;
            } else {
                this.tail = this.tail.getPrev();
                this.tail.setNext(null);
            }
            this.size--;
        }

        public void removeFirst() {
            if (this.size == 0) {
                return;
            } else if (this.size == 1) {
                this.head = null;
                this.tail = null;
            } else {
                this.head = this.head.getNext();
                this.head.setPrev(null);
            }
            this.size--;
        }

        public void print() {
            Node<T> pointer = this.head;
            while (pointer != null) {
                System.out.printf("%s ", pointer.getValue().toString());
                pointer = pointer.getNext();
            }
        }

        public T getHeadValue() {
            return this.head.getValue();
        }

        public T getTailValue() {
            return this.tail.getValue();
        }

        public void reverse() {
            Node<T> pointer = this.head;

            while (pointer != null) {
                Node<T> temp = pointer.getPrev();
                pointer.setPrev(pointer.getNext());
                pointer.setNext(temp);
                pointer = pointer.getPrev();
            }

            Node<T> temp = this.head;
            this.head = this.tail;
            this.tail = temp;

        }


    }

    class Node<T> {
        private T value;
        private List<String> transfer;
        private Node<T> prev;
        private Node<T> next;

        Node(T value, Node prev, Node next) {
            this.value = value;
            this.prev = prev;
            this.next = next;
        }

        public void setTransfer(List<String> transfer) {
            this.transfer = transfer;
        }

        public List<String> getTransfer() {
            return transfer;
        }

        public T getValue() {
            return this.value;
        }

        public Node<T> getPrev() {
            return this.prev;
        }

        public Node<T> getNext() {
            return this.next;
        }

        public void setValue(T value) {
            this.value = value;
        }

        public void setPrev(Node<T> prev) {
            this.prev = prev;
        }

        public void setNext(Node<T> next) {
            this.next = next;
        }
    }
  learner_created: true
- name: src/Utils.java
  visible: true
  text: |
    import com.google.gson.Gson;
    import com.google.gson.JsonObject;
    import com.google.gson.reflect.TypeToken;
    import com.google.gson.stream.JsonReader;

    import java.io.*;
    import java.lang.reflect.Type;
    import java.util.ArrayList;
    import java.util.List;
    import java.util.Map;

    public class Utils {

        public static List<String>readF(String filePath) {
            List<String> result = new ArrayList<>();

            try (BufferedReader br = new BufferedReader(new FileReader(filePath)))
            {
                String line;
                while ((line = br.readLine()) != null)
                {
                    result.add(line);
                }
            }
            catch (IOException e)
            {
                System.out.print("Error");
                e.printStackTrace();
            }
            return result;
        }

        public static Map<String, JsonObject> loadFromJson(String filePath) {
            String jsonString = "";
            try (BufferedReader br = new BufferedReader(new FileReader(filePath)))
            {
                String line;
                while ((line = br.readLine()) != null)
                {
                    jsonString += line;
                }
            }
            catch (IOException e)
            {
                System.out.print("Error");
                e.printStackTrace();
            }
            Gson gson = new Gson();
           // JsonObject jsonObject = new JsonParser().parse(json).getAsJsonObject();
            Type empMapType = new TypeToken<Map<String, JsonObject>>() {}.getType();
            Map<String, JsonObject> metros = gson.fromJson(jsonString, empMapType);
            return metros;
        }

        public static List<Station> getStations(String input) {
            /*input = input.replace("{", "");
            input = input.replace("}", "");
            String[] array = input.split(",");
            ArrayList<Station> result = new ArrayList<>(array.length);
            while(result.size() < array.length) result.add(new Station());
            for (String s : array) {
                s = s.replace("\"", "");
                //result.set(Integer.parseInt(s.split(":")[0]) - 1, s.split(":")[1]);
                Station temp = new Station();
                temp.setName(s.split(":")[1]);
                result.set(Integer.parseInt(s.split(":")[0]) - 1, temp);
            }*/
          //  Gson gson = new Gson();
          //  Station station = gson.fromJson(input, Station.class);
           // List<Station> stations = gson.fromJson(input, Station.class);
           // return result;
            Gson gson = new Gson();
            Type empMapType = new TypeToken<Map<String, Station>>() {}.getType();
            Map<String, Station> metros = gson.fromJson(input, empMapType);

            ArrayList<Station> result = new ArrayList<>(metros.size());
            while(result.size() < metros.size()) result.add(new Station());

            for (Map.Entry<String, Station> entry : metros.entrySet()) {
                result.set(Integer.parseInt(entry.getKey()) - 1, entry.getValue());
            }

            return result;
        }

    }
  learner_created: true
- name: src/Transfer.java
  visible: true
  text: |
    public class Transfer {
        String line;
        String station;

        public Transfer (String line, String station) {
            this.line = line;
            this.station = station;
        }

        public void setLine(String line) {
            this.line = line;
        }

        public void setStation(String station) {
            this.station = station;
        }

        public String getStation() {
            return station;
        }

        public String getLine() {
            return line;
        }
    }
  learner_created: true
- name: src/Station.java
  visible: true
  text: |
    import java.util.ArrayList;
    import java.util.List;

    public class Station {

        public String name;
        //public List<Transfer> transfer;
        public Transfer transfer;

        public void setName(String name) {
            this.name = name;
        }

        public void setTransfer(Transfer transfer) {
            this.transfer = transfer;
        }

        public String getName() {
            return name;
        }

        public Transfer getTransfer() {
            return transfer;
        }

        public String print() {
            String tr = "";
            if (transfer != null) {
                tr += " - ";
                tr += transfer.station + " (" + transfer.line + " line)";
            }
            return name + tr;
        }
    }
  learner_created: true
- name: src/MetroGraph.java
  visible: true
  learner_created: true
- name: src/pathUnweighted.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/120/stages/651/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: Tue, 05 Jan 2021 13:47:53 UTC
record: 4
